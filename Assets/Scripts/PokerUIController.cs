using UnityEngine;
using UnityEngine.UI;
using TMPro;

/// <summary>
/// –ü—Ä–æ—Å—Ç–æ–π UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–∫–µ—Ä–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
/// </summary>
public class PokerUIController : MonoBehaviour
{
    [Header("UI –≠–ª–µ–º–µ–Ω—Ç—ã")]
    [SerializeField] private TextMeshProUGUI connectionStatusText;
    [SerializeField] private TextMeshProUGUI playersListText;
    [SerializeField] private TextMeshProUGUI gameStateText;
    [SerializeField] private TextMeshProUGUI actionLogText;
    
    [Header("–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π")]
    [SerializeField] private Button foldButton;
    [SerializeField] private Button callButton;
    [SerializeField] private Button raiseButton;
    [SerializeField] private Button checkButton;
    
    [Header("–ü–æ–ª–µ –≤–≤–æ–¥–∞")]
    [SerializeField] private TMP_InputField raiseAmountInput;
    
    [Header("–°—Å—ã–ª–∫–∏")]
    [SerializeField] private PokerClient pokerClient;
    
    private void Start()
    {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        if (pokerClient != null)
        {
            pokerClient.OnConnectionStatusChanged += UpdateConnectionStatus;
            pokerClient.OnPlayersListUpdated += UpdatePlayersList;
            pokerClient.OnHandStateChanged += UpdateGameState;
            pokerClient.OnPlayerAction += LogPlayerAction;
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        SetupButtons();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
        UpdateConnectionStatus("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...");
        UpdatePlayersList(new string[0]);
        UpdateGameState(false);
    }
    
    private void SetupButtons()
    {
        if (foldButton != null)
            foldButton.onClick.AddListener(() => pokerClient?.Fold());
            
        if (callButton != null)
            callButton.onClick.AddListener(() => pokerClient?.Call());
            
        if (raiseButton != null)
            raiseButton.onClick.AddListener(RaiseAction);
            
        if (checkButton != null)
            checkButton.onClick.AddListener(() => pokerClient?.Check());
    }
    
    private void RaiseAction()
    {
        if (raiseAmountInput != null && int.TryParse(raiseAmountInput.text, out int amount))
        {
            pokerClient?.Raise(amount);
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ä–µ–π–∑–∞");
        }
    }
    
    private void UpdateConnectionStatus(string status)
    {
        if (connectionStatusText != null)
        {
            connectionStatusText.text = $"–°—Ç–∞—Ç—É—Å: {status}";
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if (status.Contains("–ü–æ–¥–∫–ª—é—á–µ–Ω"))
                connectionStatusText.color = Color.green;
            else if (status.Contains("–û—à–∏–±–∫–∞"))
                connectionStatusText.color = Color.red;
            else
                connectionStatusText.color = Color.yellow;
        }
    }
    
    private void UpdatePlayersList(string[] players)
    {
        if (playersListText != null)
        {
            if (players.Length == 0)
            {
                playersListText.text = "–ò–≥—Ä–æ–∫–∏: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤";
            }
            else
            {
                playersListText.text = $"–ò–≥—Ä–æ–∫–∏ ({players.Length}): {string.Join(", ", players)}";
            }
        }
    }
    
    private void UpdateGameState(bool handActive)
    {
        if (gameStateText != null)
        {
            gameStateText.text = handActive ? "–°–æ—Å—Ç–æ—è–Ω–∏–µ: –ò–≥—Ä–∞ –∏–¥–µ—Ç" : "–°–æ—Å—Ç–æ—è–Ω–∏–µ: –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤";
            gameStateText.color = handActive ? Color.green : Color.yellow;
        }
        
        // –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        bool canAct = handActive && pokerClient != null && pokerClient.IsConnected();
        
        if (foldButton != null) foldButton.interactable = canAct;
        if (callButton != null) callButton.interactable = canAct;
        if (raiseButton != null) raiseButton.interactable = canAct;
        if (checkButton != null) checkButton.interactable = canAct;
        if (raiseAmountInput != null) raiseAmountInput.interactable = canAct;
    }
    
    private void LogPlayerAction(string playerName, string action, int amount)
    {
        if (actionLogText != null)
        {
            string logEntry = $"{playerName}: {action}";
            if (amount > 0)
                logEntry += $" ({amount})";
            
            logEntry += "\n";
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ
            actionLogText.text = logEntry + actionLogText.text;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            string[] lines = actionLogText.text.Split('\n');
            if (lines.Length > 10)
            {
                string[] newLines = new string[10];
                System.Array.Copy(lines, 0, newLines, 0, 10);
                actionLogText.text = string.Join("\n", newLines);
            }
        }
        
        Debug.Log($"üéØ {playerName}: {action} (—Å—É–º–º–∞: {amount})");
    }
    
    [ContextMenu("Test Connection")]
    public void TestConnection()
    {
        if (pokerClient != null)
        {
            pokerClient.RequestGameState();
        }
    }
    
    [ContextMenu("Reconnect")]
    public void Reconnect()
    {
        if (pokerClient != null)
        {
            pokerClient.DisconnectFromServer();
            pokerClient.ConnectToServer();
        }
    }
    
    private void OnDestroy()
    {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        if (pokerClient != null)
        {
            pokerClient.OnConnectionStatusChanged -= UpdateConnectionStatus;
            pokerClient.OnPlayersListUpdated -= UpdatePlayersList;
            pokerClient.OnHandStateChanged -= UpdateGameState;
            pokerClient.OnPlayerAction -= LogPlayerAction;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using UnityEngine;

/// <summary>
/// Unity –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ–∫–µ—Ä–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
/// </summary>
public class PokerClient : MonoBehaviour
{
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")]
    [SerializeField] private string serverHost = "localhost";
    [SerializeField] private int serverPort = 8888;
    [SerializeField] private string playerName = "Unity Player";
    [SerializeField] private int startingStack = 1000;
    
    [Header("–û—Ç–ª–∞–¥–∫–∞")]
    [SerializeField] private bool enableDebugLogs = true;
    
    private TcpClient tcpClient;
    private NetworkStream stream;
    private Thread receiveThread;
    private bool isConnected = false;
    private string clientId;
    
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è UI
    public System.Action<string> OnConnectionStatusChanged;
    public System.Action<string[]> OnPlayersListUpdated;
    public System.Action<bool> OnHandStateChanged;
    public System.Action<string, string, int> OnPlayerAction;
    
    private void Start()
    {
        ConnectToServer();
    }
    
    private void OnDestroy()
    {
        DisconnectFromServer();
    }
    
    [ContextMenu("Connect to Server")]
    public void ConnectToServer()
    {
        try
        {
            tcpClient = new TcpClient();
            tcpClient.Connect(serverHost, serverPort);
            stream = tcpClient.GetStream();
            isConnected = true;
            
            if (enableDebugLogs)
                Debug.Log($"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É {serverHost}:{serverPort}");
            
            OnConnectionStatusChanged?.Invoke("–ü–æ–¥–∫–ª—é—á–µ–Ω");
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            receiveThread = new Thread(ReceiveMessages);
            receiveThread.Start();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            SendJoinRequest();
            
        }
        catch (Exception e)
        {
            Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e.Message}");
            OnConnectionStatusChanged?.Invoke($"–û—à–∏–±–∫–∞: {e.Message}");
        }
    }
    
    [ContextMenu("Disconnect from Server")]
    public void DisconnectFromServer()
    {
        isConnected = false;
        
        if (receiveThread != null && receiveThread.IsAlive)
        {
            receiveThread.Abort();
        }
        
        if (stream != null)
        {
            stream.Close();
        }
        
        if (tcpClient != null)
        {
            tcpClient.Close();
        }
        
        if (enableDebugLogs)
            Debug.Log("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        
        OnConnectionStatusChanged?.Invoke("–û—Ç–∫–ª—é—á–µ–Ω");
    }
    
    private void SendJoinRequest()
    {
        var message = new Dictionary<string, object>
        {
            {"type", "join"},
            {"name", playerName},
            {"stack", startingStack}
        };
        
        SendMessage(message);
    }
    
    public void SendPlayerAction(string action, int amount = 0)
    {
        var message = new Dictionary<string, object>
        {
            {"type", "action"},
            {"action", action},
            {"amount", amount}
        };
        
        SendMessage(message);
        
        if (enableDebugLogs)
            Debug.Log($"üéØ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action} (—Å—É–º–º–∞: {amount})");
    }
    
    public void RequestGameState()
    {
        var message = new Dictionary<string, object>
        {
            {"type", "get_state"}
        };
        
        SendMessage(message);
    }
    
    private void SendMessage(Dictionary<string, object> message)
    {
        if (!isConnected || stream == null)
        {
            Debug.LogWarning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            return;
        }
        
        try
        {
            string json = SimpleJSONParser.ToJSON(message);
            byte[] data = Encoding.UTF8.GetBytes(json);
            stream.Write(data, 0, data.Length);
        }
        catch (Exception e)
        {
            Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e.Message}");
        }
    }
    
    private void ReceiveMessages()
    {
        byte[] buffer = new byte[1024];
        
        while (isConnected)
        {
            try
            {
                int bytesRead = stream.Read(buffer, 0, buffer.Length);
                if (bytesRead > 0)
                {
                    string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    ProcessServerMessage(message);
                }
            }
            catch (Exception e)
            {
                if (isConnected)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e.Message}");
                }
                break;
            }
        }
    }
    
    private void ProcessServerMessage(string message)
    {
        try
        {
            var data = SimpleJSONParser.FromJSON(message);
            string messageType = data.ContainsKey("type") ? data["type"].ToString() : "";
            
            if (enableDebugLogs)
                Debug.Log($"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messageType}");
            
            switch (messageType)
            {
                case "join_success":
                    clientId = data.ContainsKey("client_id") ? data["client_id"].ToString() : "";
                    Debug.Log($"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫–∞–∫ {data["player_name"]}");
                    break;
                    
                case "players_update":
                    ProcessPlayersUpdate(data);
                    break;
                    
                case "hand_start":
                    Debug.Log($"üÉè –ù–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞");
                    OnHandStateChanged?.Invoke(true);
                    break;
                    
                case "player_action":
                    string playerName = data.ContainsKey("player_name") ? data["player_name"].ToString() : "";
                    string action = data.ContainsKey("action") ? data["action"].ToString() : "";
                    int amount = data.ContainsKey("amount") ? Convert.ToInt32(data["amount"]) : 0;
                    OnPlayerAction?.Invoke(playerName, action, amount);
                    break;
                    
                case "game_state":
                    bool handActive = data.ContainsKey("hand_active") ? Convert.ToBoolean(data["hand_active"]) : false;
                    OnHandStateChanged?.Invoke(handActive);
                    break;
                    
                case "error":
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {data["message"]}");
                    break;
                    
                default:
                    Debug.LogWarning($"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {messageType}");
                    break;
            }
        }
        catch (Exception e)
        {
            Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e.Message}");
        }
    }
    
    private void ProcessPlayersUpdate(Dictionary<string, object> data)
    {
        if (!data.ContainsKey("players"))
        {
            OnPlayersListUpdated?.Invoke(new string[0]);
            return;
        }
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        var playersData = data["players"];
        string[] playerNames = new string[0];
        
        if (playersData != null)
        {
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            if (playersData is string playersString)
            {
                playerNames = playersString.Split(',');
            }
        }
        
        OnPlayersListUpdated?.Invoke(playerNames);
        
        if (enableDebugLogs)
            Debug.Log($"üë• –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: {string.Join(", ", playerNames)}");
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è UI
    public void Fold()
    {
        SendPlayerAction("fold");
    }
    
    public void Call()
    {
        SendPlayerAction("call");
    }
    
    public void Raise(int amount)
    {
        SendPlayerAction("raise", amount);
    }
    
    public void Check()
    {
        SendPlayerAction("check");
    }
    
    public bool IsConnected()
    {
        return isConnected;
    }
    
    public string GetClientId()
    {
        return clientId;
    }
}
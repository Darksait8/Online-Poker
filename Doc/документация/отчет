
Диаграмма взаимодействия (sequence) — Авторизация

```plantuml
@startuml
actor Пользователь as User
participant Клиент as UI
participant Сервер as API
database БД as DB

User -> UI : открыть экран входа
UI -> User : форма: email/пароль
User -> UI : ввод данных
UI -> API : POST /auth/вход (email, password)
API -> DB : проверить пользователя, хэш пароля
DB --> API : профиль/ошибка
alt Успешно
  API --> UI : 200 OK + токен
  UI -> User : вход выполнен, главное меню
else Ошибка
  API --> UI : 401 Ошибка авторизации
  UI -> User : показать сообщение об ошибке
end
@enduml
```

Диаграмма взаимодействия (sequence) — Пополнение баланса

```plantuml
@startuml
actor Пользователь as User
participant Клиент as UI
participant Сервер as API
participant "Платёжный провайдер" as PSP
database БД as DB

User -> UI : открыть пополнение баланса
UI -> User : выбрать метод и сумму
User -> UI : ввод суммы/метода
UI -> API : POST /платежи/инициализация (method, amount)
API -> PSP : создать платёж
PSP --> API : ссылка_перенаправления/id_платежа
API --> UI : данные для оплаты (redirect)
UI -> User : переадресация на оплату
User -> PSP : подтверждение платежа
PSP --> API : webhook: paymentId, status=success/failed
API -> DB : записать транзакцию/обновить баланс (если success)
API --> UI : статус платежа (через поллинг/сокет)
UI -> User : показать результат
@enduml
```

Диаграмма взаимодействия (sequence) — Игровой ход (ставка)

```plantuml
@startuml
actor Игрок as Player
participant Клиент as UI
participant СерверСтола as TableSrv
database БД as DB

Player -> UI : выбрать действие (Чек/Колл/Бет/Рейз/Алл-ин/Фолд)
UI -> TableSrv : sendAction(handId, playerId, action, amount)
TableSrv -> DB : валидация стека/очереди хода, чтение состояния
alt Валидно
  TableSrv -> DB : записать действие в лог, обновить банк/текущую ставку
  TableSrv --> UI : actionAccepted + новое состояние
  TableSrv -> "Остальные клиенты" : broadcast state
  note over TableSrv : проверка: все уравняли?\nостался один активный?
  alt Все уравняли
    TableSrv -> UI : открыть следующую улицу/шоудаун
  else Один активный
    TableSrv -> UI : завершение раздачи, распределить банк
  end
else Ошибка
  TableSrv --> UI : действие отклонено + причина (не ваш ход/недостаточно средств/некорректная сумма)
end
@enduml
```

Диаграмма взаимодействия (Mermaid) — Авторизация

```mermaid
sequenceDiagram
  actor Пользователь as User
  participant UI as Клиент
  participant API as Сервер
  participant DB as БД

  Пользователь->>игрок: открыть экран входа
  игрок-->>Пользователь: форма email/пароль
  Пользователь->>игрок: ввести данные
  игрок->>Система: POST /auth/вход
  Система->>База_данных: проверить пользователя и хэш
  База_данных-->>Система: профиль/ошибка
  alt Успешно
    Система-->>игрок: 200 OK + токен
    игрок-->>Пользователь: вход выполнен → главное меню
  else Ошибка
    Система-->>игрок: 401 Ошибка авторизации
    игрок-->>Пользователь: показать сообщение
  end
```

Диаграмма взаимодействия (Mermaid) — Пополнение баланса

```mermaid
sequenceDiagram
  actor Пользователь as User
  participant UI as Клиент
  participant API as Сервер
  participant PSP as Платёжный_провайдер
  participant DB as БД

  Пользователь->>игрок: открыть пополнение
  игрок-->>Пользователь: выбрать метод и сумму
  Пользователь->>игрок: ввод параметров
  игрок->>Система: POST /платежи/инициализация
  Система->>баланс игрока: создать платёж
  баланс игрока-->>Система: ссылка_перенаправления/id_платежа
  Система-->>игрок: данные для оплаты
  игрок-->>Пользователь: редирект на оплату
  Пользователь->>баланс игрока: подтверждение
  баланс игрока-->>Система: webhook статус=успех/ошибка
  Система->>База_данных: записать транзакцию / обновить баланс
  Система-->>игрок: статус платежа
  игрок-->>Пользователь: показать результат
```

Диаграмма взаимодействия (Mermaid) — Игровой ход (ставка)

```mermaid
sequenceDiagram
  actor Игрок as Player
  participant UI as Клиент
  participant TableSrv as Сервер_стола
  participant DB as БД

  Player->>UI: выбрать действие (Чек/Колл/Бет/Рейз/Алл-ин/Фолд)
  игрок->>игровой стол: sendAction(handId, playerId, action, amount)
  игровой стол->>База_данных: валидация стека/очереди хода
  alt Валидно
    игровой стол->>База_данных: записать действие, обновить банк/ставку
    игровой стол-->>игрок: actionAccepted + новое состояние
    TableSrv-->>Player: уведомление
    par Проверка условий
      игровой стол-->>игрок: все уравняли? → следующая улица
    and
      игровой стол-->>игрок: остался один активный? → завершение
    end
  else Ошибка
    игровой стол-->>игрок: actionRejected (причина)
  end
```


Расширенная диаграмма взаимодействия (Mermaid) — Полный пользовательский сценарий

```mermaid
sequenceDiagram
  autonumber
  actor Пользователь as User
  participant UI as Клиент
  participant API as Сервер
  participant Table as Сервер_стола
  participant PSP as Платёжный_провайдер
  participant DB as БД

  %% Старт приложения
  Пользователь->>игрок: открыть приложение
  loop пока не завершена авторизация/регистрация
    alt регистрация
      игрок-->>Пользователь: форма регистрации (email, ник, пароль)
      Пользователь->>игрок: ввести данные
      игрок->>Система: POST /auth/регистрация
      Система->>База_данных: проверить уникальность email/ника
      alt уникально
        База_данных-->>Система: ok
        Система->>База_данных: создать игрока
        Система-->>игрок: 201 Created
        игрок-->>Пользователь: регистрация успешна → вернуться к авторизации
      else конфликт
        База_данных-->>Система: конфликт
        Система-->>игрок: 409 email/ник занят
        игрок-->>Пользователь: показать ошибку
      end
    else авторизация
      игрок-->>Пользователь: форма авторизации (email/пароль)
      Пользователь->>игрок: ввести данные
      игрок->>Система: POST /auth/вход
      Система->>База_данных: проверить пользователя и хэш пароля
      alt успех
        База_данных-->>Система: профиль
        Система-->>игрок: 200 + токен/профиль
        игрок-->>Пользователь: вход выполнен → главное меню
        break
      else ошибка
        База_данных-->>Система: не найдено/неверный пароль
        Система-->>игрок: 401/404 ошибка
        игрок-->>Пользователь: сообщение об ошибке
      end
    end
  end

  %% Главное меню и навигация
  rect rgba(240,240,255,0.5)
    loop пока не выбран выход
      игрок-->>Пользователь: главное меню (Играть/Профиль/Друзья/Лидеры/Кастомизация/Настройки/Пополнение/Выход)
      alt Играть
        Пользователь->>игрок: выбрать стол
        игрок->>Система: GET /столы?filters
        Система->>База_данных: получить список столов
        База_данных-->>Система: список
        Система-->>игрок: список столов
        игрок-->>Пользователь: показать столы
        Пользователь->>игрок: подключиться к столу
        игрок->>Система: POST /столы/{id}/присоединиться
        Система->>База_данных: проверить слот/баланс
        Система-->>игрок: ok + адрес сервера стола
        UI->>Table: connect (token, tableId)
        Table-->>UI: подключен + состояние стола

        %% Игровой цикл
        loop пока игрок за столом
          Table-->>UI: статус/чей ход/таймер
          alt ход игрока
            игрок-->>Пользователь: кнопки (Чек/Колл/Бет/Рейз/Алл-ин/Фолд), слайдер суммы
            Пользователь->>игрок: выбрать действие/ввести сумму
            UI->>Table: отправить действие(раздача, действие, сумма)
            Table->>DB: валидация стека/очереди/лимитов
            alt валидно
              DB-->>Table: ok
              Table->>DB: записать действие, обновить банк/ставку
              par оповещение игроков
                игровой стол-->>игрок: обновление состояния (себе)
                игровой стол-->>игрок: обновление состояния (остальным)
              end
              opt проверки улицы
                Table-->>UI: все уравняли → открыть следующую улицу
                Table-->>UI: остался 1 активный → завершить раздачу
              end
            else ошибка
              DB-->>Table: ошибка (не ваш ход/недостаточно средств)
              Table-->>UI: действие отклонено + причина
            end
          else ход другого игрока
            Table-->>UI: оповещения о действиях
          end

          opt пауза клиента
            Пользователь->>игрок: поставить на паузу (локально)
            игрок-->>Пользователь: меню паузы (продолжить/покинуть стол)
            alt покинуть стол
              Пользователь->>игрок: покинуть
              игрок->>Система: POST /столы/{id}/покинуть
              Система->>База_данных: обновить место/баланс
              Система-->>игрок: ok
              break
            else продолжить
              Пользователь->>игрок: продолжить
            end
          end
        end

      else Профиль
        Пользователь->>игрок: открыть профиль
        игрок->>Система: GET /профиль
        Система->>База_данных: прочитать профиль/статистику
        База_данных-->>Система: данные
        Система-->>игрок: профиль/статистика
        игрок-->>Пользователь: отображение профиля
        opt изменить профиль
          Пользователь->>игрок: поменять ник/аватар
          игрок->>Система: PUT /профиль
          Система->>База_данных: сохранить изменения
          Система-->>игрок: ok
          игрок-->>Пользователь: изменения применены
        end

      else Друзья
        Пользователь->>игрок: открыть список друзей
        игрок->>Система: GET /друзья
        Система->>База_данных: получить список/статусы
        Система-->>игрок: список друзей
        игрок-->>Пользователь: показать друзей
        opt действия
          Пользователь->>игрок: добавить/удалить/пригласить
          игрок->>Система: POST/DELETE /друзья
          Система->>База_данных: изменить связь
          Система-->>игрок: ok
        end

      else Лидеры
        Пользователь->>игрок: открыть таблицу лидеров
        игрок->>Система: GET /лидеры?scope=global|friends
        Система->>База_данных: агрегировать результаты
        Система-->>игрок: записи таблицы
        игрок-->>Пользователь: отобразить с сортировкой/фильтрами
      else Кастомизация
        Пользователь->>игрок: открыть кастомизацию карт
        игрок-->>Пользователь: выбрать дизайн/рубашку
        Пользователь->>игрок: сохранить
        игрок->>Система: PUT /настройки/карты
        Система->>База_данных: применить настройки
        Система-->>игрок: ok
      else Настройки
        Пользователь->>игрок: открыть настройки
        loop изменять параметры
          игрок-->>Пользователь: ползунки громкости/качество/язык
          Пользователь->>игрок: менять параметры
        end
        alt применить
          игрок->>Система: PUT /настройки
          Система->>База_данных: сохранить
          Система-->>игрок: ok → вернуться в меню
        else отменить
          игрок-->>Пользователь: изменения отменены
        end
      else Пополнение
        Пользователь->>игрок: пополнение баланса
        игрок-->>Пользователь: ввести сумму и метод
        Пользователь->>игрок: подтвердить
        игрок->>Система: POST /платежи/инициализация
        Система->>баланс игрока: создать платёж
        баланс игрока-->>Система: ссылка_перенаправления/id_платежа
        Система-->>игрок: данные оплаты
        игрок-->>Пользователь: редирект на страницу оплаты
        Пользователь->>баланс игрока: подтверждение
        баланс игрока-->>Система: webhook статус=успех/ошибка
        alt success
          Система->>База_данных: зафиксировать транзакцию, обновить баланс
        else failed
          Система->>База_данных: записать неуспешную попытку
        end
        Система-->>игрок: итоговый статус
        игрок-->>Пользователь: показать результат
      else Выход
        Пользователь->>игрок: выйти из игры
        игрок-->>Пользователь: подтвердить выход
        break
      end
    end
  end

  игрок-->>Пользователь: завершить приложение
```


Упрощённая диаграмма взаимодействия (Mermaid) — на русском с цветными блоками

```mermaid
sequenceDiagram
  autonumber
  actor Пользователь
  participant игрок
  participant Система
  participant игровой стол
  participant баланс игрока
  participant База_данных

  Пользователь->>игрок: открыть приложение

  loop пока не завершена авторизация/регистрация
    alt регистрация
      игрок-->>Пользователь: форма регистрации (email, ник, пароль)
      Пользователь->>игрок: ввести данные
      игрок->>Система: POST /auth/регистрация
      Система->>База_данных: проверить уникальность
      alt уникально
        База_данных-->>Система: ok
        Система->>База_данных: создать игрока
        Система-->>игрок: 201 Created
        игрок-->>Пользователь: регистрация успешна → к авторизации
      else конфликт
        База_данных-->>Система: конфликт
        Система-->>игрок: 409 email/ник занят
        игрок-->>Пользователь: показать ошибку
      end
    else авторизация
      игрок-->>Пользователь: форма авторизации
      Пользователь->>игрок: ввести данные
      игрок->>Система: POST /auth/вход
      Система->>База_данных: проверить пользователя и хэш
      alt успех
        База_данных-->>Система: профиль
        Система-->>игрок: 200 + токен
        игрок-->>Пользователь: вход выполнен → главное меню
        break
      else ошибка
        База_данных-->>Система: неверные данные
        Система-->>игрок: 401/404
        игрок-->>Пользователь: сообщение об ошибке
      end
    end
  end

  rect rgb(240,240,255)
    loop пока не выбран выход
      игрок-->>Пользователь: главное меню (Играть/Профиль/Друзья/Лидеры/Кастомизация/Настройки/Пополнение/Выход)

      alt Играть
        Пользователь->>игрок: выбрать стол
        игрок->>Система: GET /столы
        Система->>База_данных: получить список
        База_данных-->>Система: список
        Система-->>игрок: список столов
        игрок-->>Пользователь: показать столы
        Пользователь->>игрок: подключиться к столу
        игрок->>Система: POST /столы/{id}/присоединиться
        Система->>База_данных: проверить слот/баланс
        Система-->>игрок: ok + адрес сервера стола
        UI->>Table: подключиться(токен, id_стола)
        Table-->>UI: подключен + состояние

        loop пока игрок за столом
          Table-->>UI: статус/чей ход/таймер
          alt ход игрока
            игрок-->>Пользователь: Чек/Колл/Бет/Рейз/Алл-ин/Фолд
            Пользователь->>игрок: выбрать действие/сумму
            UI->>Table: отправить действие(раздача, действие, сумма)
            Table->>DB: валидация
            alt валидно
              DB-->>Table: ok
              Table->>DB: записать действие, обновить банк/ставку
              par оповещение
                игровой стол-->>игрок: обновление состояния (себе)
                игровой стол-->>игрок: обновление состояния (остальным)
              end
              opt проверки
                Table-->>UI: все уравняли → след. улица
                Table-->>UI: остался один активный → конец раздачи
              end
            else ошибка
              DB-->>Table: причина
              Table-->>UI: действие отклонено + причина
            end
          else ход другого игрока
            Table-->>UI: оповещения о действиях
          end

          opt пауза клиента
            Пользователь->>игрок: пауза
            игрок-->>Пользователь: продолжить/покинуть стол
            alt покинуть
              Пользователь->>игрок: покинуть
              игрок->>Система: POST /столы/{id}/покинуть
              Система->>База_данных: освободить место
              Система-->>игрок: ok
              break
            else продолжить
              Пользователь->>игрок: продолжить
            end
          end
        end

      else Профиль
        Пользователь->>игрок: открыть профиль
        игрок->>Система: GET /профиль
        Система->>База_данных: профиль/статистика
        База_данных-->>Система: данные
        Система-->>игрок: профиль
        игрок-->>Пользователь: показать профиль
        opt изменить
          Пользователь->>игрок: изменить ник/аватар
          игрок->>Система: PUT /профиль
          Система->>База_данных: сохранить
          Система-->>игрок: ok
        end

      else Друзья
        Пользователь->>игрок: список друзей
        игрок->>Система: GET /друзья
        Система->>База_данных: получить
        Система-->>игрок: список
        игрок-->>Пользователь: показать
        opt действия
          Пользователь->>игрок: добавить/удалить/пригласить
          игрок->>Система: POST/DELETE /друзья
          Система->>База_данных: изменить связь
          Система-->>игрок: ok
        end

      else Лидеры
        Пользователь->>игрок: таблица лидеров
        игрок->>Система: GET /лидеры
        Система->>База_данных: агрегировать
        Система-->>игрок: записи
        игрок-->>Пользователь: показать
      else Кастомизация
        Пользователь->>игрок: кастомизация карт
        игрок-->>Пользователь: выбрать дизайн
        Пользователь->>игрок: сохранить
        игрок->>Система: PUT /настройки/карты
        Система->>База_данных: применить
        Система-->>игрок: ok
      else Настройки
        Пользователь->>игрок: открыть настройки
        loop изменять параметры
          игрок-->>Пользователь: громкость/качество/язык
          Пользователь->>игрок: менять
        end
        alt применить
          игрок->>Система: PUT /настройки
          Система->>База_данных: сохранить
          Система-->>игрок: ok
        else отменить
          игрок-->>Пользователь: отменено
        end
      else Пополнение
        Пользователь->>игрок: пополнение баланса
        игрок-->>Пользователь: ввести сумму/метод
        Пользователь->>игрок: подтвердить
        игрок->>Система: POST /платежи/инициализация
        Система->>баланс игрока: создать платеж
        баланс игрока-->>Система: ссылка_перенаправления/id_платежа
        Система-->>игрок: данные оплаты
        игрок-->>Пользователь: редирект на оплату
        Пользователь->>баланс игрока: подтверждение
        баланс игрока-->>Система: webhook статус=успех/ошибка
        alt success
          Система->>База_данных: обновить баланс
        else failed
          Система->>База_данных: записать неуспешную попытку
        end
        Система-->>игрок: итоговый статус
        игрок-->>Пользователь: показать результат
      else Выход
        Пользователь->>игрок: выйти из игры
        игрок-->>Пользователь: подтвердить выход
        break
      end
    end
  end

  игрок-->>Пользователь: завершить приложение
```
